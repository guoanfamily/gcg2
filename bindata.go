// Code generated by go-bindata.
// sources:
// template/api/api.go.tmpl
// template/api/gen_api.go.tmpl
// template/main.go.tmpl
// template/model/model.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiApiGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x48\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xaa\x54\x48\x4f\x4e\x37\xe2\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\x2c\xc8\xe4\xe5\xe2\xe5\x2a\xa9\x2c\x48\x55\x70\x2c\xc8\x54\x28\x2e\x29\x2a\x4d\x2e\x51\xa8\xae\x05\x04\x00\x00\xff\xff\x5a\xb1\x50\x39\x36\x00\x00\x00")

func apiApiGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_apiApiGoTmpl,
		"api/api.go.tmpl",
	)
}

func apiApiGoTmpl() (*asset, error) {
	bytes, err := apiApiGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/api.go.tmpl", size: 54, mode: os.FileMode(438), modTime: time.Unix(1629712676, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apiGen_apiGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\x5d\x6b\xdb\x30\x14\x86\xaf\x67\xf0\x7f\x38\xcd\x45\x91\x46\x90\x46\xd9\x55\xc0\x17\x6d\xf6\x01\xfb\x68\xcb\xb2\x5d\x8d\x31\x64\xe5\xd4\x51\x22\x4b\xae\x7c\x1c\x36\x8c\xff\xfb\x90\x9d\x8e\x8d\xcc\x69\x36\x72\xb3\x3b\xdb\x92\x9e\xf3\xbe\x8f\xb0\x94\x50\xa0\xc3\xa0\x08\x21\xff\x0e\x85\x2e\x2e\xd2\xa4\x52\x7a\xa3\x0a\x04\x55\x99\x34\x49\x13\x53\x56\x3e\x10\xb0\x34\x01\x98\x38\x24\xb9\x22\xaa\x26\xfd\x5b\x61\x68\xd5\xe4\x42\xfb\x52\x1a\x6b\xf2\x5a\x16\xbe\xbe\xb7\x72\x7b\xb1\xb7\x6c\x55\x5e\x93\xd2\x1b\x89\x7a\xe5\xe5\xf6\xf9\xb0\xc1\xfa\x62\x78\x68\x5b\x71\x1b\xfc\x1a\x35\x5d\xab\x12\xbb\x4e\x96\x7e\x89\x76\x92\x26\x3c\x26\xb8\x6b\x9c\x06\xa6\xe0\xe9\x65\x65\x78\xdb\x36\x55\x85\x61\xae\x4a\xb4\x20\x3e\xaa\xdc\xe2\x70\x66\xa1\xb6\xc8\x34\xc4\x01\x62\xee\x1d\xe1\x37\xe2\x80\x21\xf8\x00\x6d\x1c\x02\xe0\xf3\x35\xcc\xb2\xf3\x9e\x2d\x46\x39\x6d\x37\xec\xc6\x10\x60\x96\x69\x71\x65\xdc\x92\xf9\x7c\xcd\x87\xcf\xe6\x2e\xae\x9c\x65\xce\xd8\x1d\xf6\x49\x40\x6a\x82\x03\x2d\xde\x2c\x6e\xae\x59\xd4\x23\x16\xa4\xa8\xa9\xaf\xd4\xf2\x03\xde\x37\x58\xd3\x34\x1e\x12\x2f\x63\x1a\xc6\x77\xa4\x2e\x4d\xc2\xf4\xeb\x2c\xeb\xa5\x89\xf7\x31\x55\x3f\x47\xcc\x03\x2a\x42\xc6\xd3\x64\x94\x7c\xf3\x76\x0a\x81\xa7\x49\x77\xbc\x9f\x4f\xd5\x32\x52\x47\x0d\x1d\x6f\xe7\x0f\x66\x7e\xb7\xf2\x0f\x42\x46\x65\xec\x62\x9f\x58\xc6\x0b\xb4\xf8\x1f\xca\xd8\xc5\x3e\xb1\x8c\x77\xa6\xa6\x83\x2a\x6a\x98\x65\x50\xaa\x0d\xb2\xcf\x5f\x1e\x51\x32\x85\x67\xfc\x41\x0a\xfc\x9a\xff\x3c\x72\xb8\xb8\xb4\x96\xfd\x54\x04\x67\x19\x38\x63\xe3\x14\xeb\x0b\x71\x1b\x8c\x23\xeb\xd8\x9e\x8c\xf8\xb7\x1c\x2a\xdc\xa3\xff\xaa\xf2\x2b\x13\x1e\xe9\x7c\xe4\xf5\x1f\x8a\xb5\x77\x7d\xaf\x91\x1e\x2a\xfd\x08\x00\x00\xff\xff\xbe\xc1\x08\x90\x7a\x05\x00\x00")

func apiGen_apiGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_apiGen_apiGoTmpl,
		"api/gen_api.go.tmpl",
	)
}

func apiGen_apiGoTmpl() (*asset, error) {
	bytes, err := apiGen_apiGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/gen_api.go.tmpl", size: 1402, mode: os.FileMode(438), modTime: time.Unix(1629777909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x6f\xdb\x38\x14\xbc\x13\xe0\x7f\xe0\xea\x10\x90\x8b\x84\xdc\x24\x7b\x12\xe0\xc3\xae\x9b\x02\x05\x9a\xc4\x8d\xdb\x5e\x0c\xa3\xa0\xe9\x27\x99\x0d\x3f\x64\x92\xb2\x13\x08\xfa\xef\x05\x25\xdb\x6d\xd2\x16\xd5\x45\x22\x67\xf8\xde\xcc\x1b\xaa\x91\xea\x51\xd6\x40\xac\xd4\x0e\x23\x8c\xb4\x6d\x7c\x48\x84\x62\x44\x48\xd1\x75\x7c\x16\xfc\x57\x50\xe9\x4e\x5a\xe8\x7b\x21\x1b\x5d\x60\x54\x54\x36\xe5\x57\xad\xd3\xa6\x5d\x71\xe5\xad\xd0\x46\xaf\xa2\xa8\x7d\xdc\x1a\xb1\xbb\x7a\x05\x1a\xb9\x8a\x49\xaa\x47\x01\x6a\xe3\xc5\xee\xdf\x3f\xc0\xc2\xea\xf5\xda\xc0\x5e\x06\x28\x30\xfa\x42\x5e\x70\xf5\x4a\x34\xdb\x9f\xb6\x6b\x7f\x11\xb7\xe6\x62\x1d\xf4\x0e\x82\xb0\xcf\x71\x6b\x72\x93\x00\x95\x01\x95\xb5\xb2\xec\xad\x6a\x9d\x1a\x8c\x52\xd6\x61\x24\x04\xb9\x51\x1b\x4f\xb4\x8b\x49\x3a\x05\x18\x01\x29\x27\x24\x8b\xe0\x77\xb0\xa7\xc3\x11\x21\xc8\xed\x49\x0d\x46\xc0\x3f\x45\xa0\xdf\xf5\xf1\xf7\xbe\xae\x21\x50\xc6\x7e\x81\x3d\x80\xf2\xbb\xdf\x81\xd3\xfb\x87\xf9\x80\xe4\x1e\x53\x6f\xad\x77\x24\xf8\x36\x41\x88\x99\x3d\xbb\x9f\x7f\xa4\x85\x28\xb3\x64\x27\x2d\x14\xe7\x24\x7f\x52\xe5\x5d\x82\xa7\x34\xaa\x9c\x8e\x0b\x46\x20\x04\x1f\xba\xd1\x60\x66\x97\x93\x03\x8f\xcf\x64\x90\x96\x16\xa7\x32\x0c\x23\x0b\x69\xe3\xd7\xd9\xea\x61\x3c\xfc\xb3\x34\x2d\xdc\x57\xf4\x4c\x36\x9a\xff\xd7\xe8\xae\x67\xfc\x76\x60\xfd\xff\x9c\x83\xa7\xc7\xe3\xd9\x48\x08\xe5\x64\x2c\xc1\xa7\xd2\x18\xba\x58\xbe\x28\xd3\xbd\x2e\x7a\x50\xc2\x7a\x86\x91\xae\xc8\x5f\x10\xc2\xe2\x9f\x25\x7f\x17\xef\xb4\x19\x72\xa8\x6c\xe2\xb3\xa0\x5d\x32\x8e\x8e\x20\xc3\xa8\xc7\x28\x40\x6a\x83\x23\x4e\x1b\x8c\xfa\x63\x18\xf3\x24\x43\x22\x11\xc2\x0e\x42\x9e\xd3\x38\x7f\xfe\x56\x26\x69\x28\xf0\x01\xa6\x45\x79\x79\x7d\x75\x5d\xb0\xb1\xce\x21\x77\xed\x74\xa2\x8c\x74\x18\x29\xef\x2a\x5d\xc7\x3c\x01\x2b\x1f\x81\x5a\xd9\x2c\x62\x0a\xda\xd5\xcb\xbf\x87\x1b\x9c\x07\x5b\xe9\x9a\x9d\xa8\x8b\x62\x0d\x95\x6c\x4d\x2a\x96\x64\x42\xce\x7e\x24\x75\x18\xdd\x38\xb9\x32\x50\x12\x92\x42\x0b\xe7\x18\xbd\x19\x6e\x61\x39\xfe\x3f\xe3\xa2\xef\x8b\x0c\x44\x57\x92\xfc\x64\x60\xee\xdb\xa0\x60\x04\xe6\x1b\xbf\x9f\x6f\x4d\x79\xac\xd0\x8f\x6e\x95\x77\x0e\x54\xd2\xde\x91\xb5\x4c\x72\x25\x23\x60\x74\x6a\x9e\x21\x7a\x10\xc8\x8e\xfb\x1f\x5a\x08\xcf\x0f\x7e\xff\x44\x8b\x08\x39\x07\x72\x99\x33\xef\xbf\x05\x00\x00\xff\xff\x84\x4e\xc0\x29\xe7\x03\x00\x00")

func mainGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mainGoTmpl,
		"main.go.tmpl",
	)
}

func mainGoTmpl() (*asset, error) {
	bytes, err := mainGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go.tmpl", size: 999, mode: os.FileMode(438), modTime: time.Unix(1629777965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelModelGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x4f\x4b\x03\x31\x10\xc5\xef\x81\x7c\x87\x47\xd8\x43\x2b\xb2\x0b\x1e\x0b\x3d\x15\xf4\x20\x14\x0f\xbd\xdb\x74\x33\x86\xe8\xe6\x0f\xd9\xec\xca\x12\xf2\xdd\x25\xad\x4a\x11\x3d\x78\x9c\x37\x6f\x7e\xf3\x5e\xd7\x41\x93\xa3\x28\x13\x29\x9c\x16\xe8\x5e\xdf\x71\x16\x64\xff\x26\x35\xc1\x7a\x45\x03\x67\x9c\x19\x1b\x7c\x4c\x58\x71\x06\x88\x64\x2c\x09\xce\xd6\x9c\xcd\x32\xe2\x19\x5b\x54\xa5\xdd\xfb\xf7\x6a\x4d\x4b\x20\xe4\x3c\x85\x40\x71\x27\x2d\x0d\x68\x0f\xf2\x34\xd0\x5e\x5a\x2a\x05\x63\x8a\x53\x9f\x90\x2b\x29\x67\x44\xe9\x34\xa1\x31\xb7\x68\x66\x6c\xb6\x68\x77\x7e\x98\xac\x1b\x51\xca\xc5\x71\xc5\x69\xe6\xf6\xde\xd0\xa0\x4a\x41\xce\xcd\xdc\x3e\xf8\xc3\x12\x2a\xf3\xa8\x4e\x1b\x71\x96\x3e\xf7\x02\xaf\xa3\x77\x3f\xb4\x23\xd0\x75\x97\xcb\x9d\xb7\x96\x5c\x3a\x83\xc8\xa9\xfa\xab\xd4\xec\x2f\x93\xeb\xb1\x0a\xb8\xf9\x33\xff\x1a\xdf\xc3\x6a\x5d\xcb\x18\xa7\x6b\x99\x48\x69\x8a\x0e\x22\xe7\x6b\xb7\xf8\x07\xf7\xe9\xf1\x57\xa0\x51\x5f\x90\x8f\x00\x00\x00\xff\xff\x02\x39\x5d\x44\xab\x01\x00\x00")

func modelModelGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_modelModelGoTmpl,
		"model/model.go.tmpl",
	)
}

func modelModelGoTmpl() (*asset, error) {
	bytes, err := modelModelGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.go.tmpl", size: 427, mode: os.FileMode(438), modTime: time.Unix(1629775264, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/api.go.tmpl":     apiApiGoTmpl,
	"api/gen_api.go.tmpl": apiGen_apiGoTmpl,
	"main.go.tmpl":        mainGoTmpl,
	"model/model.go.tmpl": modelModelGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"api.go.tmpl":     &bintree{apiApiGoTmpl, map[string]*bintree{}},
		"gen_api.go.tmpl": &bintree{apiGen_apiGoTmpl, map[string]*bintree{}},
	}},
	"main.go.tmpl": &bintree{mainGoTmpl, map[string]*bintree{}},
	"model": &bintree{nil, map[string]*bintree{
		"model.go.tmpl": &bintree{modelModelGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
