package main

import (
  "{{.ProjectName}}/api"
"github.com/labstack/echo/v4"
"github.com/labstack/echo/v4/middleware"
_ "gorm.io/driver/postgres"
"gorm.io/gorm"
_ "github.com/go-sql-driver/mysql"
"reflect"
"regexp"
"strings"
"time"
)

func init(){
dsn := "{{.Source}}"
var err error
api.Db, err = gorm.Open({{.Driver}}.Open(dsn), &gorm.Config{})
if err != nil {
panic("failed to connect database")
}
sqlDB, err := api.Db.DB()

// SetMaxIdleConns 设置空闲连接池中连接的最大数量
sqlDB.SetMaxIdleConns(10)

// SetMaxOpenConns 设置打开数据库连接的最大数量。
sqlDB.SetMaxOpenConns(100)

// SetConnMaxLifetime 设置了连接可复用的最大时间。
sqlDB.SetConnMaxLifetime(time.Hour)
}

func CapitalizeFirst(s string) string {
if s == "" {
return s
}
first := s[:1]
return strings.ToUpper(first) + s[1:]
}

func ConvertUrl(url string) string {
var keyMatchRegex = regexp.MustCompile(`(\w+)`)
converted := keyMatchRegex.ReplaceAllStringFunc(
url,
CapitalizeFirst,
)
return strings.ReplaceAll(converted, "/", "")
}

func main(){
// Echo instance
e := echo.New()

// Middleware
e.Use(middleware.Logger())
e.Use(middleware.Recover())
e.Use(middleware.CORS())

//Common routers
e.POST("/:funcname", func(context echo.Context) error{
funcname:=context.Param("funcname")
funcname := context.Param("funcname")
method := reflect.ValueOf(&api.Api{}).MethodByName(funcname)
if !method.IsValid() {
return nil
}
err:=method.Call([]reflect.Value{reflect.ValueOf(context)})
if !err[0].IsNil(){
fmt.Println(err[0])
}
return nil
})

// Start server
e.Logger.Fatal(e.Start(":{{.ServicePort}}"))
}

