// generate by gcg2
package api

import (
  "net/http"
  "github.com/labstack/echo/v4"
  "log"
  "{{.ProjectName}}/model"
)

func (a *Api){{upperCamel .TableName}}Create(c echo.Context) error {
obj :=model.{{upperCamel .TableName}}{}
if err :=c.Bind(&obj);err!=nil{
return c.JSON(http.StatusBadRequest, err.Error())
}
res := Db.Create(&obj)
return c.JSON(http.StatusOK, res.RowsAffected)
}

func (a *Api){{upperCamel .TableName}}BatchCreate(c echo.Context) error {
objs := make([]model.{{upperCamel .TableName}}, 0)
if err :=c.Bind(&objs);err!=nil{
return c.JSON(http.StatusBadRequest, err.Error())
}
res := Db.Create(&objs)
return c.JSON(http.StatusOK, res.RowsAffected)
}

func (a *Api){{upperCamel .TableName}}Update(c echo.Context) error {
obj :=model.{{upperCamel .TableName}}{}
if err :=c.Bind(&obj);err!=nil{
return c.JSON(http.StatusBadRequest, err.Error())
}
res := Db.Updates(&obj)
return c.JSON(http.StatusOK, res.RowsAffected)
}

func (a *Api){{upperCamel .TableName}}Delete(c echo.Context) error {
obj :=model.{{upperCamel .TableName}}{}
if err :=c.Bind(&obj);err!=nil{
return c.JSON(http.StatusBadRequest, err.Error())
}
res := Db.Delete(&obj)
return c.JSON(http.StatusOK, res.RowsAffected)
}

func (a *Api){{upperCamel .TableName}}List(c echo.Context) error {
obj :=model.{{upperCamel .TableName}}{}
if err :=c.Bind(&obj);err!=nil{
return c.JSON(http.StatusBadRequest, err.Error())
}
objs := make([]model.{{upperCamel .TableName}}, 0)
res := Db.Where(&obj).Find(&objs)
if res.Error != nil {
log.Println(res.Error.Error())
}
return c.JSON(http.StatusOK,objs)
}

func (a *Api) {{upperCamel .TableName}}Page(c echo.Context) error {
obj :=model.{{upperCamel .TableName}}{}
if err := c.Bind(&obj); err != nil {
return c.JSON(http.StatusBadRequest, err.Error())
}
objs := make([]model.{{upperCamel .TableName}}, 0)
var count int64
Db.Model(&model.{{upperCamel .TableName}}{}).Count(&count)
res := Db.Scopes(Paginate(c)).Where(&obj).Find(&objs)
if res.Error != nil {
log.Println(res.Error.Error())
}
ar := make(map[string]interface{})
ar["total"] = count
ar["data"] = objs
return c.JSON(http.StatusOK, ar)
}


func (a *Api){{upperCamel .TableName}}First(c echo.Context) error {
obj :=model.{{upperCamel .TableName}}{}
if err :=c.Bind(&obj);err!=nil{
return c.JSON(http.StatusBadRequest, err.Error())
}
res := Db.Where(&obj).Take(&obj)
if res.Error != nil {
log.Println(res.Error.Error())
}
return c.JSON(http.StatusOK,obj)
}
