// generate by gcg2
package api

import (
  "net/http"
  "github.com/ilibs/gosql/v2"
  "github.com/labstack/echo/v4"
  "log"
  "{{.ProjectName}}/model"
)

func (a *Api){{upperCamel .TableName}}Save(c echo.Context) error {
    obj :=&model.{{upperCamel .TableName}}{}
    err :=c.Bind(obj)
    if err!=nil{
    	return c.JSON(http.StatusBadRequest, err.Error())
    }
r,_:=gosql.Model(obj).Create()
return c.JSON(http.StatusOK, r)
}

func (a *Api){{upperCamel .TableName}}Update(c echo.Context) error {
obj :=&model.{{upperCamel .TableName}}{}
err :=c.Bind(obj)
if err!=nil{
return c.JSON(http.StatusBadRequest, err.Error())
}
r,_:=gosql.Model(obj).Update()
return c.JSON(http.StatusOK, r)
}

func (a *Api){{upperCamel .TableName}}Delete(c echo.Context) error {
obj :=&model.{{upperCamel .TableName}}{}
err :=c.Bind(obj)
if err!=nil{
return c.JSON(http.StatusBadRequest, err.Error())
}
r,_:=gosql.Model(obj).Delete()
return c.JSON(http.StatusOK, r)
}

func (a *Api){{upperCamel .TableName}}List(c echo.Context) error {
objs := make([]model.{{upperCamel .TableName}}, 0)
err := gosql.Model(&objs).All()
if err != nil {
log.Println(err.Error())
}
    return c.JSON(http.StatusOK,objs)
}

func (a *Api){{upperCamel .TableName}}First(c echo.Context) error {
obj :=&model.{{upperCamel .TableName}}{}
gosql.Model(obj).Get()
return c.JSON(http.StatusOK,obj)
}
