// generate by gcg2
package api

type Api struct {}


func psqlcond(i interface{})(str string,args []interface{})  {
where:="1=1"
t := reflect.TypeOf(i)
v := reflect.ValueOf(i)
params:=1
for k := 0; k < t.NumField(); k++ {
hasval,val:= getval(v.Field(k))
if hasval{
where+=" and "+t.Field(k).Tag.Get("db")+"=$"+strconv.Itoa(params)
params++
args= append(args, val)
}
}
return where,args
}

func getval(field reflect.Value) (has bool,val interface{}) {
switch field.Kind() {
case reflect.Int:
has=!field.IsZero()
val=field.Int()
case reflect.String:
has=!field.IsZero()
val=field.String()
case reflect.Ptr:
has=!field.IsNil()
val=field.Interface()
}
return
}